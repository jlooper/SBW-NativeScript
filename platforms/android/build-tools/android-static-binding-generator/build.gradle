/*
*	The android static binding generator will generate bindings for some javascript code you specify.
*	The passed output directory will be created if necessary
*	to run: 
*			gradle generatebindings -PjsCodeDir=[js_code_dir] -PjarsDir=[jars_dir] -PoutDir=[out_dir]
*/
def distDir = "$rootDir/dist"
def interfaceNameGeneratorDir = "$rootDir/interface-name-generator"
def interfaceNameGeneratorLibsDir = "${interfaceNameGeneratorDir}/build/libs"
def bindingGeneratorDir = "$rootDir/binding-generator"
def bindingGeneratorLibsDir = "${bindingGeneratorDir}/build/libs"
def astParserDir = "$rootDir/ast-parser"
def defaultJarsDir = "$rootDir/jars"

def pathToBindingsFile = "${astParserDir}/bindings.txt" //this file is generated by ast-parser

def isWinOs = System.properties['os.name'].toLowerCase().contains('windows')

def isJsCodePathPassed = project.hasProperty("jsCodeDir")
def isJarsDirPassed = project.hasProperty("jarsDir")
def isOutDirPassed = project.hasProperty("outDir")

if(!isJsCodePathPassed) {
	throw new GradleException("\n\t<< ERROR >>: Please pass 'jsCodeDir' property. Static binding generator needs to know where is the javascript code you want to generate bindings for. \n\t<<Example>>: -PjsCodeDir=[path_to_js_code_dir]\n")
}
if(!isJarsDirPassed) {
	throw new GradleException("\n\t<< ERROR >>: Please pass 'jarsDir' property. The static binding generator needs to know where are the jars you will use for your project, in order to generate bindings for them. Please specify a path to those jars. \n\t<<Example>>: -PjarsDir=[path_to_jars_dir]\n")
}

if(!isOutDirPassed) {
	throw new GradleException("\n\t<< ERROR >>: Please pass 'outDir' property. Static binding generator needs to know where do you want to put the bindings that will be generated. Please provide an out directory or specify one that will be created if missing. \n\t<<Example>>: -PoutDir=[path_to_output_dir]\n")
}
	
task cleanDist (type: Delete) {
	delete distDir
}

task mkDirDist {
	def distFolder = file(distDir)
	if(!isJarsDirPassed) {
		file(defaultJarsDir).mkdirs()
	}
	distFolder.mkdirs()
}

task buildInterfaceGenerator (type: Exec) {
	workingDir interfaceNameGeneratorDir
	
	if(isWinOs) {
		commandLine "cmd", "/c", "gradle", "jar"
	}
	else {
		commandLine "gradle", "jar"
	}
}

task generateInterfaceNamesList(type: JavaExec) {
	workingDir interfaceNameGeneratorLibsDir

	main "-jar"
	
	def sourceJarsDir = isJarsDirPassed ? jarsDir : defaultJarsDir
	def str = new LinkedList <String> ();
	str.add("${interfaceNameGeneratorDir}/build/libs/interface-name-generator.jar")
	str.add(sourceJarsDir)

	args str.toArray()
}

task runNpmInstallForAstParser (type: Exec) {
	workingDir astParserDir
	
	if(isWinOs) {
		commandLine "cmd", "/c", "npm", "install"
	}
	else {
		commandLine "npm", "install"
	}
}

task runAstParser (type: Exec) {
	workingDir astParserDir
	
	if(isWinOs) {
		commandLine "cmd", "/c", "node", "traverse_files.js", "${interfaceNameGeneratorLibsDir}/interfaces-names.txt", jsCodeDir
	}
	else {
		commandLine "node", "traverse_files.js", "${interfaceNameGeneratorLibsDir}/interfaces-names.txt", jsCodeDir
	}
}

task buildBindingGenerator (type: Exec) {
	workingDir bindingGeneratorDir
	
	if(isWinOs) {
		commandLine "cmd", "/c", "gradle", "jar"
	}
	else {
		commandLine "gradle", "jar"
	}
}

task generateBindings(type: JavaExec) {
	workingDir bindingGeneratorLibsDir

	main "-jar"
	
	def str = new LinkedList <String> ();
	str.add("binding-generator.jar")
	
	//jar folder to run through
	str.add(jarsDir) //fix hardcoded path (will be passed as project parameter)
	
	//generated bindings names
	str.add(pathToBindingsFile)
	
	//out dir (optional)
	str.add("$rootDir/${outDir}")
	
	args str.toArray()
}

mkDirDist.dependsOn(cleanDist)

// run interface names generator
buildInterfaceGenerator.dependsOn(mkDirDist)
generateInterfaceNamesList.dependsOn(buildInterfaceGenerator)

//run ast parser
runNpmInstallForAstParser.dependsOn(generateInterfaceNamesList)
runAstParser.dependsOn(runNpmInstallForAstParser)

buildBindingGenerator.dependsOn(runAstParser)
generateBindings.dependsOn(buildBindingGenerator)

task generatebindings { 
	dependsOn generateBindings
}